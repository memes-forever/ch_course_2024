############################################################ 1 & 2 ########################################################

* Установить кафку любым удобным способом
* Установить ClickHouse, произвести необходимые настройки


docker ps
CONTAINER ID   IMAGE                             COMMAND                  CREATED          STATUS          PORTS                                                          NAMES
55479788ad53   confluentinc/cp-kafka:7.3.2       "/etc/confluent/dock…"   16 minutes ago   Up 16 minutes   0.0.0.0:9092->9092/tcp, 0.0.0.0:29092->29092/tcp               kafka1
3300308fb0cf   confluentinc/cp-kafka:7.3.2       "/etc/confluent/dock…"   16 minutes ago   Up 16 minutes   0.0.0.0:9093->9093/tcp, 9092/tcp, 0.0.0.0:29093->29093/tcp     kafka2
fc4472a662a8   confluentinc/cp-kafka:7.3.2       "/etc/confluent/dock…"   16 minutes ago   Up 16 minutes   0.0.0.0:9094->9094/tcp, 9092/tcp, 0.0.0.0:29094->29094/tcp     kafka3
fc27a3287732   confluentinc/cp-zookeeper:7.3.2   "/etc/confluent/dock…"   16 minutes ago   Up 16 minutes   2888/tcp, 0.0.0.0:2181->2181/tcp, 3888/tcp                     zoo1
d979b380b3e7   clickhouse/clickhouse-server      "/entrypoint.sh"         2 months ago     Up 21 minutes   127.0.0.1:8123->8123/tcp, 127.0.0.1:9000->9000/tcp, 9009/tcp   clickhouse-clickhouse-1

# коннект сети кафки в клик, иначе не видят друг друга, потому что разные стэки
docker network connect kafka_default clickhouse-clickhouse-1

# заходим в терминал кафки
docker exec -ti kafka1 bash

# проверим что топика нет
kafka-topics --list --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092

# Создадим топик test
kafka-topics --create --topic test.click --partitions 3 --replication-factor 3 --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092
WARNING: Due to limitations in metric names, topics with a period ('.') or underscore ('_') could collide. To avoid issues it is best to use either, but not both.
Created topic test.click.

# запишем туда записи
echo '{"key_1": 1, "key_2": 2}' | kafka-console-producer --topic test.click --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092
echo '{"key_1": 3, "key_2": 4}' | kafka-console-producer --topic test.click --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092
echo '{"key_1": 5, "key_2": 6}' | kafka-console-producer --topic test.click --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092

# прочитаем их
kafka-console-consumer --topic test.click --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --from-beginning --property print.key=true --property print.offset=true --property print.partiotion=true

Offset:0        null    {"key_1": 1, "key_2": 2}
Offset:1        null    {"key_1": 3, "key_2": 4}
Offset:2        null    {"key_1": 5, "key_2": 6}
^CProcessed a total of 6 messages

############################################################ end 1 & 2 ########################################################
############################################################ 3 ########################################################

* Записать данные в кафку, построить пайплайн чтения через kafka engine -> mv to mergetree


CREATE TABLE kafka_test
(
    message String
)
ENGINE = MergeTree
ORDER BY message;


CREATE TABLE kafka_test_queue
(
    message String
)
ENGINE = Kafka
SETTINGS
    kafka_broker_list = 'kafka1:9092,kafka2:9092,kafka3:9092',
    kafka_topic_list = 'test.click',
    kafka_group_name = 'click-group',
    kafka_format = 'LineAsString',  -- формат, который затягивает все что угодно в строку, даже битые csv/json форматы
    kafka_num_consumers = 1,
    kafka_skip_broken_messages = 0,
    kafka_thread_per_consumer = 0;

CREATE MATERIALIZED VIEW kafka_test_queue_mv TO kafka_test
(
    message String
) AS SELECT message FROM kafka_test_queue;

select *
from kafka_test;

############################################################ end 3 ########################################################
############################################################ 4 ########################################################

* Убедиться в верном прочтении данных


SELECT *
FROM kafka_test

Query id: c94a6c93-c1b1-4038-a1a3-a2a1d0ab3bb8

   ┌─message──────────────────┐
1. │ {"key_1": 1, "key_2": 2} │
2. │ {"key_1": 3, "key_2": 4} │
3. │ {"key_1": 5, "key_2": 6} │
   └──────────────────────────┘

3 rows in set. Elapsed: 0.002 sec.

############################################################ end 4 ########################################################
############################################################ 5 ########################################################

Записать данные в кафку с помощью ClickHouse Kafka Engine

Запись делается легко, просто insert в таблицу с KafkaEngine:

insert into kafka_test_queue values ('{"key_1": 99, "key_2": 66}')

INSERT INTO kafka_test_queue FORMAT Values

Query id: dfab3145-1ea2-4585-bd2b-fbc900039bff

Ok.

1 row in set. Elapsed: 1.071 sec.

SELECT *
FROM kafka_test

Query id: 96b18450-2b63-48f1-b4d5-1708b87bf95d

   ┌─message──────────────────┐
1. │ {"key_1": 1, "key_2": 2} │
2. │ {"key_1": 3, "key_2": 4} │
3. │ {"key_1": 5, "key_2": 6} │
   └──────────────────────────┘
   ┌─message────────────────────┐
4. │ {"key_1": 99, "key_2": 66} │
   └────────────────────────────┘

4 rows in set. Elapsed: 0.009 sec.


############################################################ end 5 ########################################################
############################################################ 6 ########################################################

Построить тот же пайплайн обработки данных НЕ через Kafka Engine

CREATE TABLE kafka_test_2
(
    message String
)
ENGINE = MergeTree
ORDER BY message;

python kafka_load.py
Failed to create topic test.click: KafkaError{code=TOPIC_ALREADY_EXISTS,val=36,str="Topic 'test.click' already exists."}
Message delivered to test.click [1]
Message delivered to test.click [1]
Message delivered to test.click [1]
Received message: {"key_1": 1, "key_2": 2}
Received message: {"key_1": 3, "key_2": 4}
Received message: {"key_1": 5, "key_2": 6}


SELECT *
FROM kafka_test_2

Query id: 73564043-adb0-492b-8696-6d27f083e974

   ┌─message──────────────────┐
1. │ {"key_1": 1, "key_2": 2} │
2. │ {"key_1": 3, "key_2": 4} │
3. │ {"key_1": 5, "key_2": 6} │
   └──────────────────────────┘

3 rows in set. Elapsed: 0.007 sec.

############################################################ end 6 ########################################################
